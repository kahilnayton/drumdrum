{"ast":null,"code":"var _jsxFileName = \"/Users/Kahil/Desktop/sei/drumdrum/src/components/Plucky/Plucky.js\";\nimport React, { Component } from 'react';\nimport Tone from 'tone';\nimport PluckySlider from './PluckySlider';\nimport { Button } from 'semantic-ui-react';\n\nclass PolyMachine extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = () => {\n      let counter = 0;\n      let plucky = new Tone.PluckSynth().toMaster();\n      let bassSynth = new Tone.MembraneSynth().toMaster();\n      let fmSynth = new Tone.FMSynth().toMaster();\n      let loopBeat = new Tone.Loop(time => {\n        if (counter % 4 === 0) {\n          plucky.triggerAttackRelease(\"D1\", \"2n\", time, 1);\n        }\n\n        if (counter % 2 === 0) {\n          bassSynth.triggerAttackRelease(\"D1\", \"2n\", time, 1);\n        }\n\n        if (counter % 8 === 0) {\n          fmSynth.triggerAttackRelease(\"D1\", \"2n\", time, 1);\n        }\n\n        counter = (counter + 1) % 16;\n      });\n      Tone.Transport.start(0);\n      loopBeat.start(0);\n      Tone.Transport.bpm.value = this.props.pluckyState;\n    };\n\n    this.stop = () => {\n      Tone.Transport.stop(0);\n    };\n\n    this.render = () => {\n      console.log(this.props.pluckyState);\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Button, {\n        inverted: true,\n        color: \"green\",\n        onClick: this.start,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Plucky\"), React.createElement(Button, {\n        inverted: true,\n        color: \"green\",\n        onClick: this.stop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"stop\"));\n    };\n\n    this.state = {\n      synth: null\n    };\n  }\n\n}\n\nexport default PolyMachine;","map":{"version":3,"sources":["/Users/Kahil/Desktop/sei/drumdrum/src/components/Plucky/Plucky.js"],"names":["React","Component","Tone","PluckySlider","Button","PolyMachine","constructor","props","start","counter","plucky","PluckSynth","toMaster","bassSynth","MembraneSynth","fmSynth","FMSynth","loopBeat","Loop","time","triggerAttackRelease","Transport","bpm","value","pluckyState","stop","render","console","log","state","synth"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAOnBC,KAPmB,GAOX,MAAM;AACV,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,MAAM,GAAG,IAAIR,IAAI,CAACS,UAAT,GAAsBC,QAAtB,EAAb;AACA,UAAIC,SAAS,GAAG,IAAIX,IAAI,CAACY,aAAT,GAAyBF,QAAzB,EAAhB;AACA,UAAIG,OAAO,GAAG,IAAIb,IAAI,CAACc,OAAT,GAAmBJ,QAAnB,EAAd;AAEA,UAAIK,QAAQ,GAAG,IAAIf,IAAI,CAACgB,IAAT,CAAeC,IAAD,IAAU;AACnC,YAAIV,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;AACnBC,UAAAA,MAAM,CAACU,oBAAP,CAA4B,IAA5B,EAAkC,IAAlC,EAAwCD,IAAxC,EAA8C,CAA9C;AAEH;;AACD,YAAIV,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;AACnBI,UAAAA,SAAS,CAACO,oBAAV,CAA+B,IAA/B,EAAqC,IAArC,EAA2CD,IAA3C,EAAiD,CAAjD;AACH;;AACD,YAAIV,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;AACnBM,UAAAA,OAAO,CAACK,oBAAR,CAA6B,IAA7B,EAAmC,IAAnC,EAAyCD,IAAzC,EAA+C,CAA/C;AACH;;AACDV,QAAAA,OAAO,GAAG,CAACA,OAAO,GAAG,CAAX,IAAgB,EAA1B;AACH,OAZc,CAAf;AAaAP,MAAAA,IAAI,CAACmB,SAAL,CAAeb,KAAf,CAAqB,CAArB;AACAS,MAAAA,QAAQ,CAACT,KAAT,CAAe,CAAf;AACAN,MAAAA,IAAI,CAACmB,SAAL,CAAeC,GAAf,CAAmBC,KAAnB,GAA2B,KAAKhB,KAAL,CAAWiB,WAAtC;AAEH,KA9BkB;;AAAA,SAgCnBC,IAhCmB,GAgCZ,MAAM;AACTvB,MAAAA,IAAI,CAACmB,SAAL,CAAeI,IAAf,CAAoB,CAApB;AACH,KAlCkB;;AAAA,SAqCnBC,MArCmB,GAqCV,MAAM;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWiB,WAAvB;AACA,aACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,MAAhB;AAAiB,QAAA,KAAK,EAAC,OAAvB;AACI,QAAA,OAAO,EAAE,KAAKhB,KADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAII,oBAAC,MAAD;AAAQ,QAAA,QAAQ,MAAhB;AAAiB,QAAA,KAAK,EAAC,OAAvB;AACI,QAAA,OAAO,EAAE,KAAKiB,IADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ;AASH,KAhDkB;;AAEf,SAAKI,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAN+B;;AAoDpC,eAAezB,WAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Tone from 'tone';\nimport PluckySlider from './PluckySlider'\nimport { Button } from 'semantic-ui-react'\n\nclass PolyMachine extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            synth: null\n        }\n    }\n\n    start = () => {\n        let counter = 0\n        let plucky = new Tone.PluckSynth().toMaster()\n        let bassSynth = new Tone.MembraneSynth().toMaster()\n        let fmSynth = new Tone.FMSynth().toMaster()\n\n        let loopBeat = new Tone.Loop((time) => {\n            if (counter % 4 === 0) {\n                plucky.triggerAttackRelease(\"D1\", \"2n\", time, 1)\n\n            }\n            if (counter % 2 === 0) {\n                bassSynth.triggerAttackRelease(\"D1\", \"2n\", time, 1)\n            }\n            if (counter % 8 === 0) {\n                fmSynth.triggerAttackRelease(\"D1\", \"2n\", time, 1)\n            }\n            counter = (counter + 1) % 16\n        })\n        Tone.Transport.start(0);\n        loopBeat.start(0)\n        Tone.Transport.bpm.value = this.props.pluckyState\n\n    }\n\n    stop = () => {\n        Tone.Transport.stop(0)\n    }\n\n\n    render = () => {\n        console.log(this.props.pluckyState)\n        return (\n            <div className=\"App\">\n                <Button inverted color=\"green\"\n                    onClick={this.start}>Plucky</Button>\n\n                <Button inverted color=\"green\"\n                    onClick={this.stop}>stop</Button>\n            </div>\n        );\n    }\n}\n\nexport default PolyMachine;"]},"metadata":{},"sourceType":"module"}